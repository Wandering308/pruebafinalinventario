import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

class DatabaseHelper {
  static final DatabaseHelper _instance = DatabaseHelper._internal();
  factory DatabaseHelper() => _instance;
  
  DatabaseHelper._internal();

  static Database? _database;

  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDatabase();
    return _database!;
  }

  Future<Database> _initDatabase() async {
    final dbPath = await getDatabasesPath();
    final path = join(dbPath, 'inventory.db');

    return await openDatabase(
      path,
      version: 1,
      onCreate: _onCreate,
    );
  }

  Future<void> _onCreate(Database db, int version) async {
    await db.execute('''
      CREATE TABLE inventories(
        id TEXT PRIMARY KEY,
        name TEXT,
        description TEXT
      )
    ''');
    await db.execute('''
      CREATE TABLE products(
        id TEXT PRIMARY KEY,
        inventoryId TEXT,
        name TEXT,
        barcode TEXT,
        price REAL,
        quantity INTEGER,
        category TEXT,
        brand TEXT,
        FOREIGN KEY (inventoryId) REFERENCES inventories (id)
      )
    ''');
  }

  Future<List<Map<String, dynamic>>> getInventories() async {
    final db = await database;
    return await db.query('inventories');
  }

  Future<List<Map<String, dynamic>>> getProducts(String inventoryId) async {
    final db = await database;
    return await db.query('products', where: 'inventoryId = ?', whereArgs: [inventoryId]);
  }

  Future<void> insertInventory(Map<String, dynamic> inventory) async {
    final db = await database;
    await db.insert('inventories', inventory);
  }

  Future<void> insertProduct(Map<String, dynamic> product) async {
    final db = await database;
    await db.insert('products', product);
  }

  Future<void> deleteInventory(String id) async {
    final db = await database;
    await db.delete('inventories', where: 'id = ?', whereArgs: [id]);
    await db.delete('products', where: 'inventoryId = ?', whereArgs: [id]);
  }

  Future<void> deleteProduct(String id) async {
    final db = await database;
    await db.delete('products', where: 'id = ?', whereArgs: [id]);
  }

  Future<void> updateInventory(Map<String, dynamic> inventory) async {
    final db = await database;
    await db.update('inventories', inventory, where: 'id = ?', whereArgs: [inventory['id']]);
  }

  Future<void> updateProduct(Map<String, dynamic> product) async {
    final db = await database;
    await db.update('products', product, where: 'id = ?', whereArgs: [product['id']]);
  }
}